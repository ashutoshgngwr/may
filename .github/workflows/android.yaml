name: Android
on:
  push:
    branches:
      - "**"
    tags:
      - "**"
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "**.md"

env:
  JAVA_VERSION: 11

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}
      - run: ./gradlew :may:check --no-daemon --stacktrace

  push-release:
    name: Push to Sonatype
    if: github.repository == 'ashutoshgngwr/may' && github.event_name == 'push'
    needs: [tests]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}
      - run: |
          echo "$SIGNING_KEY" | base64 --decode > "${GITHUB_WORKSPACE}/key.gpg"
          echo "SIGNING_SECRET_KEY_RING_FILE=${GITHUB_WORKSPACE}/key.gpg" >> "$GITHUB_ENV"
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      # publish branch snapshots for commits
      - if: ${{ ! contains(github.ref, 'refs/tags/') }}
        run: ARTIFACT_VERSION="${GITHUB_REF##*/}-SNAPSHOT" ./gradlew :may:publish --no-daemon --stacktrace
      # publish release for tags
      - if: ${{ contains(github.ref, 'refs/tags/') }}
        run: ARTIFACT_VERSION="${GITHUB_REF##*/}" ./gradlew :may:publish --no-daemon --stacktrace

  create-github-release:
    name: Create GitHub Release
    if: github.repository == 'ashutoshgngwr/may' && github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [push-release]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags -f
      - id: get_tag_message
        run: >-
          TAG_BODY="$(git tag  --list --format='%(contents:body)' ${GITHUB_REF/'refs/tags/'/''})";
          TAG_BODY="${TAG_BODY//'%'/'%25'}";
          TAG_BODY="${TAG_BODY//$'\n'/'%0A'}";
          TAG_BODY="${TAG_BODY//$'\r'/'%0D'}";
          echo "::set-output name=message::${TAG_BODY}";
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ github.ref }}
          body: ${{ steps.get_tag_message.outputs.message }}
          draft: false
          prerelease: ${{ endsWith(github.ref, '-rc') }}
