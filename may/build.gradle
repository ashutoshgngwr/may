plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 16
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'com.esotericsoftware:kryo:5.3.0'

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.6'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

final libraryGroupId = 'io.github.ashutoshgngwr'
final libraryArtifactId = 'may'
final libraryVersion = System.getenv('ARTIFACT_VERSION') ?: 'dev-SNAPSHOT'
final ossrhUsername = System.getenv('OSSRH_USERNAME') ?: ''
final ossrhPassword = System.getenv('OSSRH_PASSWORD') ?: ''

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId libraryGroupId
                artifactId libraryArtifactId
                version libraryVersion
                artifact androidSourcesJar

                pom {
                    name = libraryArtifactId
                    description = 'A deliberately simple persistent key-value store for Android'
                    url = 'https://github.com/ashutoshgngwr/may'
                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'https://github.com/ashutoshgngwr/may/blob/main/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'ashutoshgngwr'
                            name = 'Ashutosh Gangwar'
                            email = 'ashutoshgngwr@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/ashutoshgngwr/may.git'
                        developerConnection = 'scm:git:ssh://github.com/ashutoshgngwr/may.git'
                        url = 'https://github.com/ashutoshgngwr/may'
                    }
                }
            }
        }

        repositories {
            maven {
                final releasesRepoUrl = "https://s01.oss.sonatype.org/content/repositories/releases/"
                final snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

                name "sonatype"
                url libraryVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                authentication {
                    basic(BasicAuthentication)
                }

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

ext['signing.keyId'] = System.getenv('SIGNING_KEY_ID') ?: ''
ext['signing.password'] = System.getenv('SIGNING_PASSWORD') ?: ''
ext['signing.secretKeyRingFile'] = System.getenv('SIGNING_SECRET_KEY_RING_FILE') ?: ''

signing {
    sign publishing.publications
}

// disable signing when publishing to local maven repository (Jitpack needs it signing disabled).
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(Sign) {
        onlyIf { !taskGraph.hasTask(":may:publishToMavenLocal") }
    }
}
